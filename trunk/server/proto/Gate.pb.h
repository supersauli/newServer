// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Gate.proto

#ifndef PROTOBUF_proto_2fGate_2eproto__INCLUDED
#define PROTOBUF_proto_2fGate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Gate {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fGate_2eproto();
void protobuf_AssignDesc_proto_2fGate_2eproto();
void protobuf_ShutdownFile_proto_2fGate_2eproto();

class Info;

// ===================================================================

class Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gate.Info) */ {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  inline Info* New() const { return New(NULL); }

  Info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dwID = 1;
  void clear_dwid();
  static const int kDwIDFieldNumber = 1;
  ::google::protobuf::uint32 dwid() const;
  void set_dwid(::google::protobuf::uint32 value);

  // optional bytes str = 2;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:Gate.Info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::uint32 dwid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fGate_2eproto();
  friend void protobuf_AssignDesc_proto_2fGate_2eproto();
  friend void protobuf_ShutdownFile_proto_2fGate_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Info

// optional uint32 dwID = 1;
inline void Info::clear_dwid() {
  dwid_ = 0u;
}
inline ::google::protobuf::uint32 Info::dwid() const {
  // @@protoc_insertion_point(field_get:Gate.Info.dwID)
  return dwid_;
}
inline void Info::set_dwid(::google::protobuf::uint32 value) {
  
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Gate.Info.dwID)
}

// optional bytes str = 2;
inline void Info::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Info::str() const {
  // @@protoc_insertion_point(field_get:Gate.Info.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gate.Info.str)
}
inline void Info::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gate.Info.str)
}
inline void Info::set_str(const void* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gate.Info.str)
}
inline ::std::string* Info::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:Gate.Info.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Info::release_str() {
  // @@protoc_insertion_point(field_release:Gate.Info.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:Gate.Info.str)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Gate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fGate_2eproto__INCLUDED
